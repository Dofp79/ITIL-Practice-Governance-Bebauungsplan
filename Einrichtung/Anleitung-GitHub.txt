🧰 Anleitung: .whl → .txt → GitHub → .whl → Power BI-fähige Python-Umgebung
🧭 1. Auf deinem Internet-fähigen PC: .whl-Dateien vorbereiten
🔹 a) Erstelle ein Repository auf GitHub
Gehe zu https://github.com

Erstelle ein neues privates Repo (z. B. python-pakete-itil)

Klone es lokal oder nutze Web-Upload

🔹 b) .whl-Dateien herunterladen
bash
Kopieren
Bearbeiten
pip download pandas openpyxl office365-rest-python-client -d python_libs
➡️ Das speichert alle .whl-Dateien in den Ordner python_libs

🔹 c) Benenne .whl-Dateien in .txt um
In CMD oder manuell im Explorer:

bash
Kopieren
Bearbeiten
rename pandas-*.whl pandas.txt
rename openpyxl-*.whl openpyxl.txt
rename office365*.whl office365.txt
⚠️ Verwende möglichst einfache Namen, damit die Rückumbenennung leichter ist.

🔹 d) Lade die .txt-Dateien in dein GitHub-Repository
Web: Upload im GitHub-Interface

Oder Git:

bash
Kopieren
Bearbeiten
git add *.txt
git commit -m "Bibliotheken für Offline-Installation"
git push
💻 2. Auf deinem VPN-Rechner: Dateien abrufen & rekonstruieren
🔹 a) GitHub öffnen
Gehe im Browser auf dein Repository

Klicke auf jede Datei → „Raw“ → Rechtsklick → „Speichern unter“

Speicherort z. B. C:\python_offline\

🔹 b) Benenne die .txt-Dateien zurück in .whl
bash
Kopieren
Bearbeiten
rename pandas.txt pandas-1.3.5.whl
rename openpyxl.txt openpyxl-3.0.10.whl
rename office365.txt office365_rest.whl
✅ Achte auf die genaue Versionsbezeichnung (kann aus GitHub-Dateinamen entnommen werden)

🔹 c) Installiere Pakete lokal
Öffne dein Python-Terminal (z. B. WinPython oder cmd) und führe aus:

bash
Kopieren
Bearbeiten
pip install --no-index --find-links="C:\python_offline" pandas openpyxl office365-rest-python-client
✅ Ergebnis:
Du hast alle Pakete erfolgreich offline installiert, ganz ohne ZIP, ohne USB, ohne Admin – nur durch GitHub und Datei-Umbennung.
